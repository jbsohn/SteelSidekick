apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.steelsidekick.steelsidekick"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Configures source set directory.
    sourceSets {
        main.java.srcDirs += "${rootDir}/../SGuitar/swig/java"
        main { assets.srcDirs = ["${rootDir}/../Resources"] }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    task runSwig(type:Exec) {
        String osName = System.getProperty("os.name").toLowerCase();
        inputs.dir "${rootDir}/../SGuitar/include"
        outputs.dir "${rootDir}/../SGuitar/swig/java/com/steelsidekick/sguitar"

        if (osName.contains("windows")) {
            // not tested
            workingDir "${rootDir}/../SGuitar/swig"
            commandLine 'cmd', '/c', 'swig', '-java', '-c++', '-cppext', '.cpp', '-package', 'com.steelsidekick.sguitar', '-outdir', 'java/com/steelsidekick/sguitar', '-o', 'cpp/SG.cpp', 'SGuitar.i'
        } else {
            println "Unix build..."
            def swigCommand = '/usr/local/bin/swig'
            workingDir "${rootDir}/../SGuitar/swig"

            if (new File(swigCommand).exists()) {
                commandLine swigCommand, '-java', '-c++', '-cppext', '.cpp', '-package', 'com.steelsidekick.sguitar', '-outdir', 'java/com/steelsidekick/sguitar', '-o', 'cpp/SG.cpp', 'SGuitar.i'
            } else {
                // to change the C++ interface we need swig but try to continue if the swig command is not found
                println 'skipping swig'
                commandLine 'echo'
            }
        }
    }

    preBuild.dependsOn runSwig
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
}


