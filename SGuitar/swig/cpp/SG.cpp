/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include "../include/SGuitar.hpp"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_GUITAR_1CANVAS_1POSITION_1stringNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GUITAR_CANVAS_POSITION *arg1 = (GUITAR_CANVAS_POSITION *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUITAR_CANVAS_POSITION **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stringNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_GUITAR_1CANVAS_1POSITION_1stringNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GUITAR_CANVAS_POSITION *arg1 = (GUITAR_CANVAS_POSITION *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUITAR_CANVAS_POSITION **)&jarg1; 
  result = (int) ((arg1)->stringNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_GUITAR_1CANVAS_1POSITION_1fretNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GUITAR_CANVAS_POSITION *arg1 = (GUITAR_CANVAS_POSITION *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUITAR_CANVAS_POSITION **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fretNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_GUITAR_1CANVAS_1POSITION_1fretNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GUITAR_CANVAS_POSITION *arg1 = (GUITAR_CANVAS_POSITION *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUITAR_CANVAS_POSITION **)&jarg1; 
  result = (int) ((arg1)->fretNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1GUITAR_1CANVAS_1POSITION(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GUITAR_CANVAS_POSITION *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GUITAR_CANVAS_POSITION *)new GUITAR_CANVAS_POSITION();
  *(GUITAR_CANVAS_POSITION **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_delete_1GUITAR_1CANVAS_1POSITION(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GUITAR_CANVAS_POSITION *arg1 = (GUITAR_CANVAS_POSITION *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUITAR_CANVAS_POSITION **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1guitarType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->guitarType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1guitarType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->guitarType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1guitarName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->guitarName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1guitarName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->guitarName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1showAllNotes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showAllNotes = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1showAllNotes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  result = (bool) ((arg1)->showAllNotes);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1showNotesAs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  ACCIDENTAL_DISPLAY_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  arg2 = (ACCIDENTAL_DISPLAY_TYPE)jarg2; 
  if (arg1) (arg1)->showNotesAs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGGuitarOptions_1showNotesAs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  ACCIDENTAL_DISPLAY_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  result = (ACCIDENTAL_DISPLAY_TYPE) ((arg1)->showNotesAs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1SGGuitarOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SG::SGGuitarOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SG::SGGuitarOptions *)new SG::SGGuitarOptions();
  *(SG::SGGuitarOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_delete_1SGGuitarOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SG::SGGuitarOptions *arg1 = (SG::SGGuitarOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SG::SGGuitarOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1showScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showScale = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1showScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  result = (bool) ((arg1)->showScale);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1scaleName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->scaleName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1scaleName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->scaleName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1scaleRootNoteValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scaleRootNoteValue = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1scaleRootNoteValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  result = (int) ((arg1)->scaleRootNoteValue);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1displayItemsAs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  DISPLAY_ITEM_AS_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  arg2 = (DISPLAY_ITEM_AS_TYPE)jarg2; 
  if (arg1) (arg1)->displayItemsAs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGScaleOptions_1displayItemsAs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  DISPLAY_ITEM_AS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  result = (DISPLAY_ITEM_AS_TYPE) ((arg1)->displayItemsAs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1SGScaleOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SG::SGScaleOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SG::SGScaleOptions *)new SG::SGScaleOptions();
  *(SG::SGScaleOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_delete_1SGScaleOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SG::SGScaleOptions *arg1 = (SG::SGScaleOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SG::SGScaleOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1showChord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showChord = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1showChord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  result = (bool) ((arg1)->showChord);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1chordName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->chordName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1chordName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->chordName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1chordRootNoteValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chordRootNoteValue = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1chordRootNoteValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  result = (int) ((arg1)->chordRootNoteValue);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1displayItemsAs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  DISPLAY_ITEM_AS_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  arg2 = (DISPLAY_ITEM_AS_TYPE)jarg2; 
  if (arg1) (arg1)->displayItemsAs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGChordOptions_1displayItemsAs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  DISPLAY_ITEM_AS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  result = (DISPLAY_ITEM_AS_TYPE) ((arg1)->displayItemsAs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1SGChordOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SG::SGChordOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SG::SGChordOptions *)new SG::SGChordOptions();
  *(SG::SGChordOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_delete_1SGChordOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SG::SGChordOptions *arg1 = (SG::SGChordOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SG::SGChordOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1sharedInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SG::SGuitar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SG::SGuitar *) &SG::SGuitar::sharedInstance();
  *(SG::SGuitar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1setSystemAndUserPaths(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string arg1 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  SG::SGuitar::setSystemAndUserPaths(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getGuitarOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  SG::SGGuitarOptions result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (arg1)->getGuitarOptions();
  *(SG::SGGuitarOptions **)&jresult = new SG::SGGuitarOptions((const SG::SGGuitarOptions &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1setGuitarOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  SG::SGGuitarOptions arg2 ;
  SG::SGGuitarOptions *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  argp2 = *(SG::SGGuitarOptions **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SG::SGGuitarOptions");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setGuitarOptions(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getScaleOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  SG::SGScaleOptions result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (arg1)->getScaleOptions();
  *(SG::SGScaleOptions **)&jresult = new SG::SGScaleOptions((const SG::SGScaleOptions &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1setScaleOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  SG::SGScaleOptions arg2 ;
  SG::SGScaleOptions *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  argp2 = *(SG::SGScaleOptions **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SG::SGScaleOptions");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setScaleOptions(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getChordOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  SG::SGChordOptions result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (arg1)->getChordOptions();
  *(SG::SGChordOptions **)&jresult = new SG::SGChordOptions((const SG::SGChordOptions &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1setChordOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  SG::SGChordOptions arg2 ;
  SG::SGChordOptions *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  argp2 = *(SG::SGChordOptions **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SG::SGChordOptions");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setChordOptions(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getScaleNoteValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (arg1)->getScaleNoteValues();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getChordNoteValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (arg1)->getChordNoteValues();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getNumberOfStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (int)(arg1)->getNumberOfStrings();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getNumberOfFrets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (int)(arg1)->getNumberOfFrets();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getNoteValuesForString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getNoteValuesForString(arg2);
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1reloadGuitar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  (arg1)->reloadGuitar();
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1isAdjustmentEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((SG::SGuitar const *)arg1)->isAdjustmentEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1activateAdjustment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->activateAdjustment(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1midiValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->midiValue(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1positionAtCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  float arg2 ;
  float arg3 ;
  GUITAR_CANVAS_POSITION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (arg1)->positionAtCoordinates(arg2,arg3);
  *(GUITAR_CANVAS_POSITION **)&jresult = new GUITAR_CANVAS_POSITION((const GUITAR_CANVAS_POSITION &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1setSelectedItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  GUITAR_CANVAS_POSITION arg2 ;
  GUITAR_CANVAS_POSITION *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  argp2 = *(GUITAR_CANVAS_POSITION **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUITAR_CANVAS_POSITION");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSelectedItem(arg2);
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jfloat JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1cacluateNoteWidthHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->cacluateNoteWidthHeight(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1updateCanvasDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->updateCanvasDimensions(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1draw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  (arg1)->draw();
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getScaleNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = ((SG::SGuitar const *)arg1)->getScaleNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getChordNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = ((SG::SGuitar const *)arg1)->getChordNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getGuitarTypeNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = ((SG::SGuitar const *)arg1)->getGuitarTypeNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getGuitarNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::string arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((SG::SGuitar const *)arg1)->getGuitarNames(arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getCustomGuitarNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = ((SG::SGuitar const *)arg1)->getCustomGuitarNames();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1removeCustomGuitar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->removeCustomGuitar(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getNoteNameSharpFlat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = SG::SGuitar::getNoteNameSharpFlat(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getPedalTypeName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = SG::SGuitar::getPedalTypeName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getLeverTypeName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = SG::SGuitar::getLeverTypeName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_SGuitar_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SG::SGuitar *arg1 = (SG::SGuitar *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SG::SGuitar **)&jarg1; 
  result = (arg1)->getDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1StdStringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1StdStringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_StdStringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_delete_1StdStringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_steelsidekick_sguitar_SGJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

